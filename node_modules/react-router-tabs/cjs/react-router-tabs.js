'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var reactRouterDom = require('react-router-dom');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var RoutedTabs = function RoutedTabs(_ref) {
  var startPathWith = _ref.startPathWith,
      elementType = _ref.elementType,
      className = _ref.className,
      style = _ref.style,
      tabClassName = _ref.tabClassName,
      activeTabClassName = _ref.activeTabClassName,
      tabStyle = _ref.tabStyle,
      activeTabStyle = _ref.activeTabStyle,
      children = _ref.children,
      extraProps = _objectWithoutPropertiesLoose(_ref, ["startPathWith", "elementType", "className", "style", "tabClassName", "activeTabClassName", "tabStyle", "activeTabStyle", "children"]);

  var enhancedChildren = React.Children.map(children, function (tab) {
    if (!tab) return;

    if (typeof tab.type === 'string') {
      return tab;
    }

    var props = tab.props;
    var to = typeof props.to === 'object' ? _extends({}, props.to, {
      pathname: startPathWith + props.to.pathname
    }) : startPathWith + props.to;
    return React.cloneElement(tab, _extends({
      to: to,
      className: props.className !== 'nav-tab' ? props.className : tabClassName,
      activeClassName: props.activeClassName !== 'active' ? props.activeClassName : activeTabClassName,
      style: props.style || tabStyle,
      activeStyle: props.activeStyle || activeTabStyle
    }, extraProps));
  });
  var El = elementType;
  return React.createElement(El, {
    className: className,
    style: style
  }, enhancedChildren);
};

{
  RoutedTabs.propTypes = {
    startPathWith: PropTypes.string,
    className: PropTypes.string,
    style: PropTypes.object,
    tabClassName: PropTypes.string,
    activeTabClassName: PropTypes.string,
    tabStyle: PropTypes.object,
    activeTabStyle: PropTypes.object,
    children: PropTypes.node
  };
}

RoutedTabs.defaultProps = {
  startPathWith: '',
  elementType: 'div',
  className: 'react-router-tabs',
  tabClassName: 'nav-tab',
  activeTabClassName: 'active',
  tabStyle: null,
  activeTabStyle: null
};

var NavTab = function NavTab(_ref) {
  var to = _ref.to,
      replace = _ref.replace,
      exact = _ref.exact,
      strict = _ref.strict,
      location = _ref.location,
      activeClassName = _ref.activeClassName,
      className = _ref.className,
      activeStyle = _ref.activeStyle,
      style = _ref.style,
      getIsActive = _ref.isActive,
      ariaCurrent = _ref['aria-current'],
      disabled = _ref.disabled,
      allowClickOnActive = _ref.allowClickOnActive,
      rest = _objectWithoutPropertiesLoose(_ref, ["to", "replace", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current", "disabled", "allowClickOnActive"]);

  var path = typeof to === 'object' ? to.pathname : to;
  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
  return React.createElement(reactRouterDom.Route, {
    exact: exact,
    path: escapedPath,
    strict: strict,
    location: location,
    children: function children(_ref2) {
      var location = _ref2.location,
          match = _ref2.match;
      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

      var onClick = function onClick(e) {
        if (disabled || isActive && !allowClickOnActive) {
          e.preventDefault();
        }
      };

      return React.createElement(reactRouterDom.Link, _extends({
        to: to,
        replace: replace,
        onClick: onClick,
        className: isActive ? [className, activeClassName].filter(function (i) {
          return i;
        }).join(' ') : className,
        style: isActive ? _extends({}, style, activeStyle) : style,
        "aria-current": isActive && ariaCurrent || null
      }, rest));
    }
  });
};

{
  NavTab.propTypes = {
    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
    replace: PropTypes.bool,
    exact: PropTypes.bool,
    strict: PropTypes.bool,
    activeClassName: PropTypes.string,
    className: PropTypes.string,
    activeStyle: PropTypes.object,
    style: PropTypes.object,
    'aria-current': PropTypes.oneOf(['page', 'step', 'location', 'date', 'time', 'true']),
    disabled: PropTypes.bool
  };
}

NavTab.defaultProps = {
  'aria-current': 'page',
  className: 'nav-tab',
  activeClassName: 'active',
  replace: true
};

exports.NavTab = NavTab;
exports.RoutedTabs = RoutedTabs;
